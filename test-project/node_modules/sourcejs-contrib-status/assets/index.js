define([
    'jquery',
    'sourceModules/module',
    'sourceModules/css',
    'sourceLib/lodash',
    'node_modules/sourcejs-contrib-status/assets/lib/socket.io-1.3.5'
], function($, Module, css, _, socketio) {

    'use strict';

    /**
     * @Object default module option values
     */
    var defaults = {
    };

    /**
     * @module Status - plugin for showing background tasks status
     *
     * @constructor
     *
     * @param [Object] config - auth inline configuration set of options
     */
    function Status(config) {
        var _this = this;
        var _config = config || {};
        var globalConfig = this.options.plugins && this.options.plugins.status ? this.options.plugins.status : {};

        this.localData = {};
        this.remoteData = {};

        this.conf = $.extend(true, {},
            defaults,
            _config.options,
            globalConfig
        );

        new css("/node_modules/sourcejs-contrib-status/assets/css/status.css");

        $(function() {
            _this.init();
        });
    }

    Status.prototype = Module.createInstance();
    Status.prototype.constructor = Status;

    Status.prototype.prepareData = function(data){
        return _.merge(data, this.localData);
    };

    Status.prototype.addError = function(data){
        this.localData = _.merge(this.localData, data);

        this.render(this.remoteData);
    };

    Status.prototype.render = function(data){
        var $target = $('.source_info');
        var $statusContainer = $('.sourcejs-status');
        var $statusHtml = $('<ul class="sourcejs-status"></ul>');
        var _data = this.prepareData(data);

        _.forOwn(_data, function (value, key) {
            var msg = value.msg;
            var msgText = msg ? '. Message: ' + msg : '';

            $statusHtml.append('<li>' + key + ':' + value.status + msgText + '</li>')
        });

        if ($statusContainer.length === 0) {
            $target.append($statusHtml)
        } else {
            $statusContainer.replaceWith($statusHtml);
        }
    };

    Status.prototype.initSocket = function(){
        var socket = socketio(window.location.hostname + ':8081');
        var that = this;

        socket.on('status-update', function (data) {
            if (data) {
                that.remoteData = data;
                that.render(data);
            }
        });
    };

    Status.prototype.init = function(){
        var that = this;
        var $statusContainer = $('.sourcejs-status');

        if ($statusContainer.length === 0) {
            $.get('/plugins/status')
                .done(function(data) {
                    that.remoteData = data;
                    that.render(data);
                })
                .fail(function() {});
        }

        this.initSocket();
    };

    return new Status();
});