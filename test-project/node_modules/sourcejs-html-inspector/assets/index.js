define([
    'jquery',
    'sourceModules/module',
    'node_modules/sourcejs-html-inspector/assets/lib/html-inspector',
    'sourcejs-contrib-status'
], function($, Module, inspector, status) {
    'use strict';

    /**
     * @Object default module option values
     */
    var defaults = {
    };

    /**
     * @module HtmlInspector - plugin for showing background tasks HtmlInspector
     *
     * @constructor
     *
     * @param [Object] config - auth inline configuration set of options
     */
    function HtmlInspector(config) {
        var _this = this;
        var _config = config || {};
        var globalConfig = this.options.plugins && this.options.plugins.HtmlInspector ? this.options.plugins.HtmlInspector : {};

        this.conf = $.extend(true, {},
            defaults,
            _config.options,
            globalConfig
        );

        $(function() {
            _this.init();
        });
    }

    HtmlInspector.prototype = Module.createInstance();
    HtmlInspector.prototype.constructor = HtmlInspector;

    HtmlInspector.prototype.init = function(){
        inspector.rules.add(
            "bb-inline-css",
            function (listener, reporter, config) {

                // register a handler for the `attribute` event
                listener.on('attribute', function (name, value, element) {

                            // return if there's no data prefix
                            if (name !== "style") return

                            reporter.warn(
                                    "bb-inline-css",
                                    "Inline CSS found. Don't use inline css. Put all styling at the widget's CSS file.",
                                    element
                            )
                        }
                )
            });
        inspector.rules.add(
            "bb-script-tag",
            function (listener, reporter, config) {

                // register a handler for the `attribute` event
                listener.on('element', function (name, value) {

                            // return if there's no data prefix
                            if (name === "script") {
                                reporter.warn(
                                        "bb-script-tag",
                                        "Internal JavaScript found. Don't use internal JavaScript. Use external scripts for all the widget's logic.",
                                        value
                                )
                            }

                            return

                        }
                )
            });
        inspector.rules.add(
            "bb-styles-tag",
            function (listener, reporter, config) {

                // register a handler for the `attribute` event
                listener.on('element', function (name, value) {

                            // return if there's no data prefix
                            if (name === "style") {
                                reporter.warn(
                                        "bb-styles-tag",
                                        "internal CSS found. Don't use internal CSS. Put all styling at the widget's CSS file.",
                                        value
                                )
                            }

                            return

                        }
                )
            });

        $('.source_example').each(function(){
            inspector.inspect({
                domRoot: this,
                onComplete: function(errors) {
                    var errMsgStack = [];

                    errors.forEach(function (error) {
                        console.warn(error.message, error.context)
                    });

                    if (errors.length > 0) {
                        status.addError({
                            'html-inspector': {
                                status: "error",
                                msg: errMsgStack.join('.')
                            }
                        })
                    }
                },
                excludeRules: ["unused-classes", "validate-attributes", "validate-elements"]
            })
        });
    };

    return new HtmlInspector();
});